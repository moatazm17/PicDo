  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Clean Header */}
      <View style={[
        styles.header, 
        { 
          backgroundColor: colors.surface, 
          borderBottomColor: colors.border
        }
      ]}>
        <TouchableOpacity
          style={styles.headerButton}
          onPress={() => router.back()}
          activeOpacity={0.7}
        >
          <Ionicons
            name="arrow-back"
            size={24}
            color={colors.text}
          />
        </TouchableOpacity>
        
        <Text style={[styles.headerTitle, { color: colors.text }]}>
          {job.summary || t('result.result')}
        </Text>
        
        <TouchableOpacity
          style={styles.headerButton}
          onPress={() => setEditing(!editing)}
          activeOpacity={0.7}
        >
          <Ionicons
            name={editing ? "eye" : "create"}
            size={24}
            color={colors.text}
          />
        </TouchableOpacity>
      </View>

      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* View Toggle */}
          {renderViewToggle()}
          
          {/* Image Card - only show when not in full text mode */}
          {!showingFullText && job.thumb && (
            <View style={[styles.imageCard, { backgroundColor: colors.surface }]}>
              <TouchableOpacity 
                style={styles.imageContainer}
                onPress={() => setShowFullImage(true)}
                activeOpacity={0.95}
              >
                <Image
                  source={{ uri: `data:image/jpeg;base64,${job.thumb}` }}
                  style={styles.image}
                  resizeMode="contain"
                />
                <View style={styles.imageOverlay}>
                  <View style={[styles.expandIcon, { backgroundColor: 'rgba(0,0,0,0.6)' }]}>
                    <Ionicons name="expand" size={16} color="white" />
                  </View>
                </View>
              </TouchableOpacity>
            </View>
          )}
          
          {/* Entities Strip - always show */}
          {renderEntitiesStrip()}
          
          {/* Suggested Types - only show when not editing */}
          {!editing && renderSuggestedTypes()}
          
          {/* Full Text View - only show when in full text mode */}
          {showingFullText && renderTextBlocks()}
          
          {/* Data Card - only show when not in full text mode */}
          {!showingFullText && (
            <View style={[styles.dataCard, { backgroundColor: colors.surface }]}>
              <View style={styles.cardHeader}>
                <Text style={[styles.cardTitle, { color: colors.text }]}>Information</Text>
                <View style={[styles.editBadge, { backgroundColor: editing ? colors.success + '20' : colors.primary + '20' }]}>
                  <Ionicons 
                    name={editing ? "create" : "eye"} 
                    size={14} 
                    color={editing ? colors.success : colors.primary} 
                  />
                  <Text style={[styles.editBadgeText, { color: editing ? colors.success : colors.primary }]}>
                    {editing ? 'Editing' : 'View Only'}
                  </Text>
                </View>
              </View>
              
              <View style={styles.fieldsContainer}>
                {renderFields()}
              </View>
            </View>
          )}

          {/* Bottom Spacing */}
          <View style={{ height: 100 }} />
        </ScrollView>

        {/* Action Button */}
        <View style={styles.actionContainer}>
          <TouchableOpacity
            style={[
              styles.actionButton,
              {
                backgroundColor: colors.primary,
                opacity: actionLoading ? 0.7 : 1,
              },
            ]}
            onPress={editing ? handleSave : handleAction}
            disabled={actionLoading}
            activeOpacity={0.9}
          >
            <LinearGradient
              colors={[colors.primary, colors.primary + 'DD']}
              style={styles.actionGradient}
            >
              {actionLoading ? (
                <Text style={styles.actionText}>{t('common.loading')}</Text>
              ) : (
                <View style={styles.actionContent}>
                  <Ionicons
                    name={editing ? "checkmark-circle" : getTypeIcon(selectedType?.type || job.type)}
                    size={24}
                    color="white"
                  />
                  <Text style={styles.actionText}>
                    {editing ? t('common.save') : getActionText(selectedType?.type || job.type)}
                  </Text>
                </View>
              )}
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {/* Full Screen Image Modal */}
      <Modal
        visible={showFullImage}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowFullImage(false)}
      >
        <View style={styles.fullScreenImage}>
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setShowFullImage(false)}
          >
            <Ionicons name="close-circle" size={32} color="white" />
          </TouchableOpacity>
          
          <Image
            source={{ uri: `data:image/jpeg;base64,${job.thumb}` }}
            style={styles.fullImage}
            resizeMode="contain"
          />
          
          <Text style={styles.modalInfoText}>
            {t('result.tapToClose')}
          </Text>
        </View>
      </Modal>
    </SafeAreaView>
  );
